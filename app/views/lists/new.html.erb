<h1>新規投稿</h1>

<!--バリデーションによるエラーメッセージを表示-->
<!--errorsは、発生したエラーの内容を確認できるメソッド。
    any? と組み合わせることで、エラーが発生しているかどうかを判定できます。-->
<% if @list.errors.any? %>
  <%= @list.errors.count %>件のエラーが発生しました
  <!--エラー文は配列で保存されているため、eachを使います(title,body,imageの順に繰り返していく）-->
  <ul>
    <% @list.errors.full_messages.each do |message| %>
      <li><%= message %></li>
    <% end %>
  </ul>
<% end %>
<!--form_withヘルパーとは、Railsで用意されているヘルパーメソッドの1つで、
投稿ページなどでのフォームの実装（今回は新規投稿フォーム）に役立ちます。
ヘルパーメソッドとは主にビューでHTMLタグを出現させたりテキストを加工するために使用するメソッドの総称です。-->

<!--form_with部分(endまでの範囲に適応）-->
<!--url  どのURLへフォームの情報を送信するか
 method  HTTPメソッドを指定-->

 <!--ここでの @list とは、List.newのこと
  『post』は作ったデータをコントローラの「create」に送信して保存処理へ向かうこと　-->
  <!--つまり↓の意味は『新規作成用フォームを「/lists」に送信し、投稿された内容を保存する』
 　　 という処理を『f』という名前にするよ！ということ　　-->
<%= form_with model: @list, url: '/lists', method: :post do |f| %>

  <!--単一行のテキストフィールドのオブジェクト使用（text_field）-->
  <h4>タイトル</h4>
  <%= f.text_field :title %>

  <!--複数行のテキストフィールドのオブジェクト使用（text_area）-->
  <h4>本文</h4>
  <%= f.text_area :body %>

  <!--画像用のフィールド-->
  <h4>画像</h4>
  <!--file_field＝ファイルの投稿をするためのフィールド
      (画像ファイル以外のファイル(音声や動画など)も投稿できてしまう）
      なので、今回は「accept: "image/*"」で、画像ファイルしか投稿できないようにした-->
     <%= f.file_field :image, accept: "image/*" %>

  <!--送信ボタンのオブジェクト使用（submit）-->
  <%= f.submit '投稿' %>
<% end %>
